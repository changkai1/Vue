1、h5 history模式 修改路由页面不刷新
    1.1、pushState：保留历史记录
        history.pushState({}, '', 'about')
        history.pushState({}, '', 'home')
    1.2、replaceState：替换，没历史记录
        history.replaceState({}, '', 'about')
    1.3、history.go(-1)和 history.back()等价，后退一步
    1.4、history.go(1)和 history.forward()等价，前进一步
2、<router-view></router-view>
    占位,表示路由文件在什么地方显示,该标签会根据当前的路径，动态渲染出不同的组件。
3、<router-link to="/home">首页</router-link>
   <router-link></router-link>属性
    to: 路由跳转
    tag: 'button' 渲染成什么标签
    replace: 后退键不能返回到上一个页面中，不会留下history记录
    active-class: 路由选中时的class名
4、路由配置
    const router = new VueRouter({
        mode: 'history',  // history模式
        linkActiveClass: 'active', // 路由选中时的class名，批量配置
        routes
    })
5、全局导航守卫
    5.1 前置守卫
    修改title
    router.beforeEach((to, from, next) => {
        document.title = to.meta.title
        //  document.title = to.matched[0].meta.title
        // next可以传参next({path: '/login'})
        next()
    })
    5.2 后置守卫 没有next参数
    router.afterEach((to, from) => {
        console.log('to', to)
        console.log('from', from)
    })
6、路由独享守卫
    {
        path: '/about',
        name: 'about',
        meta: {
            title: '关于'
        },
        // 路由独享守卫
        beforeEnter: (to, from, next) => {
            console.log('路由独享守卫to', to)
            console.log('路由独享守卫from', from)
            next()
        },
        component: () => import ('../components/about.vue')
    }
7、组件内的守卫,写在组件内部
    beforeRouteEnter (to, from, next) {
        // 在渲染该组件的对应路由被 confirm 前调用
        // 不！能！获取组件实例 `this`
        // 因为当守卫执行前，组件实例还没被创建
        // 通过 `vm` 访问组件实例
        next(vm => {
            console.log(vm.name)
        })
    },
    beforeRouteUpdate (to, from, next) {
        // 在当前路由改变，但是该组件被复用时调用
        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
        // 可以访问组件实例 `this`
    },
    beforeRouteLeave (to, from, next) {
        // 导航离开该组件的对应路由时调用
        // 可以访问组件实例 `this`
    }
















